# -*- coding: utf-8 -*-
"""pilas_semana_5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GUnVA_cO40CzBuyOCVddzYrkQL04QYGa

## ejercicio 1: implementacion de 1 pila
"""

class Nodo:

    def __init__(self, elemento):
        self.elemento = elemento
        self.siguiente = None


class Pila:

    def __init__(self):
        self.tope = None

    def push(self, elemento):
        nuevo_nodo = Nodo(elemento)
        nuevo_nodo.siguiente = self.tope
        self.tope = nuevo_nodo

    def pop(self):
        if self.isEmpty():
            raise ValueError("La pila est치 vac칤a")
        nodo_a_eliminar = self.tope
        self.tope = self.tope.siguiente
        return nodo_a_eliminar.elemento

    def top(self):
        if self.isEmpty():
            raise ValueError("La pila est치 vac칤a")
        return self.tope.elemento

    def isEmpty(self):
        return self.tope is None

    def size(self):
        nodo_actual = self.tope
        contador = 0
        while nodo_actual is not None:
            contador += 1
            nodo_actual = nodo_actual.siguiente
        return contador


pila = Pila()

pila.push(7)
pila.push(8)
pila.push(9)

print("los resultados son los siguientes 游끥")
print("el elemento que esta encima:",pila.top())  # 9
print("el elemento eliminado es:",pila.pop())  # 9
print("el elemento que esta encima:",pila.top())  # 8
print("la pila esta vacia? => ", pila.isEmpty())  # False
print("cantidad de elementos: ", pila.size())  # 2


# Complejidad de tiempo y espacio

# La complejidad de tiempo  es O(1).

# La complejidad de espacio es O(n).

"""##ejercicio 2: voltear una cadena de texto utilizando una pila


"""



def voltear_cadena(cadena):

  pila = Pila()

  for caracter in cadena:
    pila.push(caracter)

  cadena_volteada = ""
  while not pila.isEmpty():
    cadena_volteada += pila.pop()

  return cadena_volteada

print("el texto se lee al reves :", voltear_cadena("Estructuras de algoritmos"))  # texto volteado
print("el texto se lee al reves :", voltear_cadena("12345678"))
print("el texto se lee al reves :", voltear_cadena("=> oso <="))

#COMPLEJIDAD DE TIEMPO :O(n) + O(n) = O(n)
#COMPLEJIDAD DE ESPACIO :  O(n)

"""## ejercicio 3: verifcar parentesis balanceados"""

def verificar_parentesis_balanceados(cadena):
  pila = []
  parentesis = {"{":"}","(":")","[":"]"}

  for c in cadena:
      if c in parentesis:
        pila.append(c)
      elif len(pila) == 0 or c != parentesis[pila.pop()]:
        return False
  return len(pila) == 0


print("ejemplos: ")
print("esta cadena es correcta? : ",verificar_parentesis_balanceados("(){}[]"))
print("esta cadena es correcta? : ",verificar_parentesis_balanceados("(){}["))
print("esta cadena es correcta? : ",verificar_parentesis_balanceados("(){}[]()"))

#COMPLEJIDAD DE TIEMPO : O(n)
#COMPLEJIDAD DE ESPACIO :  O(n)

"""## ejercicio 4: evaluaci칩n de expresiones postfijas (notaci칩n polaca inversa)


"""

def notaci칩n_polaca_inversa(cadena):

  pila = Pila()

  for caracter in cadena:
    if caracter in ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]:
      pila.push(int(caracter))
    elif caracter in ["+", "-", "*", "/"]:
      operando_2 = pila.pop()
      operando_1 = pila.pop()

      resultado = operando_1 + operando_2 if caracter == "+" else operando_1 - operando_2
      pila.push(resultado)

  return pila.pop()

print("ejemplos para mostrar resultado: ")
print("el resultado de esta notaci칩n polaca inversa es: ",notaci칩n_polaca_inversa("5 3 +"))
print("el resultado de esta notaci칩n polaca inversa es: ",notaci칩n_polaca_inversa("8 9 -"))
print("el resultado de esta notaci칩n polaca inversa es: ",notaci칩n_polaca_inversa("7 5 *"))


#COMPLEJIDAD DE TIEMPO : O(n)
#COMPLEJIDAD DE ESPACIO :  O(n)

"""## ejercicio 5: conversion de n칰mero decimal a n칰mero binario"""

def decimal_a_binario(numero):

  pila = Pila()

  while numero > 0:
    residuo = numero % 2
    pila.push(residuo)
    numero //= 2

  binario = ""
  while not pila.isEmpty():
    binario += str(pila.pop())

  return binario

print("ejemplos de resultados")
print("el numero 1 a binario es :",decimal_a_binario(1))
print("el numero 12 a binario es :",decimal_a_binario(12))
print("el numero 109 a binario es :",decimal_a_binario(109))


#COMPLEJIDAD DE TIEMPO : O(n)
#COMPLEJIDAD DE ESPACIO :  O(n)

"""## ejercicio 6: implementaci칩n de una pila limitada"""

class Pila:

  def __init__(self, tamanio_maximo):
    self.tamanio_maximo = tamanio_maximo
    self.pila = []

  def push(self, elemento):
    if len(self.pila) < self.tamanio_maximo:
      self.pila.append(elemento)
    else:
      raise ValueError("La pila est치 llena")

  def pop(self):
    if not self.isEmpty():
      return self.pila.pop()
    else:
      raise ValueError("La pila est치 vac칤a")

  def top(self):
    if not self.isEmpty():
      return self.pila[-1]
    else:
      raise ValueError("La pila est치 vac칤a")

  def isEmpty(self):
    return len(self.pila) == 0

  def size(self):
    return len(self.pila)


pila = Pila(5)

pila.push(1)
pila.push(11)
pila.push(3)
pila.push(1)
pila.push(3)
pila.push(1)

print(pila.pop())
print(pila.pop())
print(pila.pop())
print(pila.pop())
print(pila.pop())
print(pila.pop())


try:
  pila.push(4)
except ValueError:
  print("La pila est치 llena")


#COMPLEJIDAD DE TIEMPO : O(n)
#COMPLEJIDAD DE ESPACIO : O(10)

"""##ejercicio 7: palindormos"""

def es_palindromo(palabra):
  palabra = palabra.lower()
  palabra = palabra.replace("","")
  palabra = palabra.replace("치","a")
  palabra = palabra.replace("칠","e")
  palabra = palabra.replace("칤","i")
  palabra = palabra.replace("칩","o")
  palabra = palabra.replace("칰","u")

  a = 0
  b = len(palabra) - 1
  for i in range(0, len(palabra)):
    if palabra[a] == palabra[b]:
      a +=1
      b -=1
    else:
      return False
  return True

palabra = input("칦ngresa palabra: ")

if es_palindromo(palabra):
  print("si es palindromo")

else:
  print("no es palindromo")



def es_palindromo(palabra):

  if not isinstance(palabra, str):
    return False

  palabra = palabra.lower()
  palabra = palabra.replace("", "")
  palabra = palabra.replace("치", "a")
  palabra = palabra.replace("칠", "e")
  palabra = palabra.replace("칤", "i")
  palabra = palabra.replace("칩", "o")
  palabra = palabra.replace("칰", "u")

  a = 0
  b = len(palabra) - 1
  caracter_1 = None
  caracter_2 = palabra[len(palabra) - 1]

  for i in range(0, len(palabra)):
    if palabra[a] == palabra[b]:
      a += 1
      b -= 1
      caracter_1 = palabra[b]
    else:
      return False
  return pila.isEmpty() or caracter_1 == caracter_2


palabra = "oso"

print(f"La palabra '{palabra}' es {'un pal칤ndromo' if es_palindromo(palabra) else 'no un pal칤ndromo'}")

def es_palindromo(palabra):

  if not isinstance(palabra, str):
    return False

  palabra = palabra.lower()
  palabra = palabra.replace("", "")
  palabra = palabra.replace("치", "a")
  palabra = palabra.replace("칠", "e")
  palabra = palabra.replace("칤", "i")
  palabra = palabra.replace("칩", "o")
  palabra = palabra.replace("칰", "u")

  a = 0
  b = len(palabra) - 1
  caracter_1 = None
  caracter_2 = palabra[len(palabra) - 1]

  for i in range(0, len(palabra)):
    if palabra[a] == palabra[b]:
      a += 1
      b -= 1
      caracter_1 = palabra[b]
    else:
      return False
  return pila.isEmpty() or caracter_1 == caracter_2


palabra = input("Ingrese una palabra: ")

print(f"La palabra '{palabra}' es {'un pal칤ndromo' if es_palindromo(palabra) else 'no un pal칤ndromo'}")

"""## ejercicio 8: navegador de paginas web(historial hacia atras)"""

class Historial:

  def __init__(self):
    self.pila = []

  def agregar_pagina(self, pagina):
    self.pila.append(pagina)

  def retroceder(self):
    if len(self.pila) > 0:
      return self.pila.pop()
    else:
      return None

historial = Historial()

historial.agregar_pagina("https://www.google.com")
historial.agregar_pagina("https://www.facebook.com")
historial.agregar_pagina("https://www.twitter.com")

print(historial.retroceder())
# https://www.facebook.com

print(historial.retroceder())
# https://www.google.com

print(historial.retroceder())
# None

#COMPLEJIDAD DE TIEMPO : O(n)
#COMPLEJIDAD DE ESPACIO : O(1)

"""## ejercicio 9: torre de hanoi

"""

def hanoi(discos, origen, auxiliar, destino):
    if discos == 1:
        # Caso base
        destino.append(origen.pop())
        print("Movimiento #1: ", origen, auxiliar, destino)
    else:
        # Caso recursivo
        hanoi(discos - 1, origen, destino, auxiliar)
        destino.append(origen.pop())
        print("Movimiento #", discos, ":", origen, auxiliar, destino)
        hanoi(discos - 1, auxiliar, origen, destino)


# Inicio
origen = [ 3, 2, 1]
auxiliar = []
destino = []

# Soluci칩n
hanoi(len(origen), origen, auxiliar, destino)

# Final
print("Final: ", origen, auxiliar, destino)


#COMPLEJIDAD DE TIEMPO : O(2^n)
#COMPLEJIDAD DE ESPACIO : O(n)

def moverTorre(altura,origen, destino, intermedio):
    if altura >= 1:
        moverTorre(altura-1,origen,intermedio,destino)
        moverDisco(origen,destino)
        moverTorre(altura-1,intermedio,destino,origen)

def moverDisco(desde,hacia):
    print("mover disco de",desde,"a",hacia)

moverTorre(3,"A","B","C")

#COMPLEJIDAD DE TIEMPO : O(2^n)
#COMPLEJIDAD DE ESPACIO : O(n)