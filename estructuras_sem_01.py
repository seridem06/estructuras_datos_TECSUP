# -*- coding: utf-8 -*-
"""estructuras_sem_01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nJmg6-jqd5KHO2Kz70KbJlqpH-xla87D

## Ejercicio_01:hola nombre
solicita al usuario que ingrese su nombre y luego muestra un mensaje de saludo personalizado.
"""
print("======================")
print("SALUDO")
print("======================")
def saludo():
    nombre = input("Ingrese su nombre: ")

    print("Hola, "   "!  BIENVENIDO!"+ nombre)

saludo()

# complejidad de tiempo: O(1)
# complejidad de espacio: O(1)


"""##Ejercicio_02:suma de numeros
Escribe un programa que tome un número entero n como entrada y calcule la
suma de todos los números del 1 al n.



"""

print("======================")
print("SUMA DE NUMEROS")
print("======================")
def suma_numeros(n):
    suma = 0
    for i in range(1, n+1):
        suma += i
    return suma

n = int(input("Ingrese un número entero : "))
resultado = suma_numeros(n)
print(f"La suma de todos los números del 1 al {n} es:", resultado)

# complejidad de tiempo: O(n)
# complejidad de espacio: O(1)

"""##Ejercicio_03: Calculadora simple
Crea una calculadora que sume, reste, multiplique y divida dos números
ingresados por el usuario.
"""

print("======================")
print("CALCULADORA")
print("======================")
def suma(a, b):
    return a + b

def resta(a, b):
    return a - b

def multiplicacion(a, b):
    return a * b

def division(a, b):
    return a / b

opciones = {
    "+": suma,
    "-": resta,
    "*": multiplicacion,
    "/": division
}

num1 = int(input("Ingrese el primer número: "))
num2 = int(input("Ingrese el segundo número: "))

operacion = input("Ingrese la operación (+, -, *, /): ")

resultado = opciones[operacion](num1, num2)
print("El resultado de la operación", operacion, "es:", resultado)

# complejidad de tiempo: O(1)
# complejidad de espacio: O(1)

"""##Ejercicio_04: Tabla de multiplicar
Solicita al usuario un número e imprime su tabla de multiplicar del 1 al 10.
"""


print("======================")
print("TABLA DE MULTIPLICAR")
print("======================")
num = int(input("Ingrese un número: "))
for i in range(1, 11):
    print(i, "x", num, "=", num * i)

# complejidad de tiempo: O(n)
# complejidad de espacio: O(1)

"""##Ejercicio_05:Búsqueda de Número
Escribe un programa que tome una lista de números y un número objetivo, y
verifique si el número objetivo está presente en Ia lista.
"""

print("======================")
print("NUMERO OBJETIVO")
print("======================")
def Búsqueda_de_Número(lst, num):
    return num in lst

lista = [1, 3, 5, 7, 9]
objetivo = 8
print(Búsqueda_de_Número(lista, objetivo))

# complejidad de tiempo: O(n)
# complejidad de espacio: O(1)

"""##Ejercicio 6: Verificar Número Par o Impar
Solicita al usuario un número e indica si es par o impar.
"""

print("======================")
print("PAR O IMPAR")
print("======================")

numero = int(input("Ingrese un número: "))

if numero % 2 == 0:
    print(f"El número {numero} es par.")
else:
    print(f"El número {numero} es impar.")

# complejidad de tiempo: O(1)
# complejidad de espacio: O(1)

"""##Ejercicio 7: Encontrar el Máximo
Escribe un programa que tome una lista de números y encuentre el número
máximo.
"""


print("======================")
print("NUMERO MAXIMO")
print("======================")
def maximo(lista):
    maximo = lista[0]
    for numero in lista:
        if numero > maximo:
            maximo = numero
    return maximo


lista = [1, 5, 3, 2, 9]
print(maximo(lista))

# complejidad de tiempo: O(n)
# complejidad de espacio: O(1)

"""##Ejercicio 8: Potencia de un Número
Escribe una función para calcular la potencia de un número x elevado a la
potencia n.
"""


print("======================")
print("POTENCIA DE UN NUMERO")
print("======================")

def potencia(x, n):
    if n == 0:
        return 1
    elif n % 2 == 0:
        return potencia(x * x, n // 2)
    else:
        return x * potencia(x, n - 1)
    print(pow(2, 10))

def potencia(x, n):
    resultado = 1
    for i in range(n):
        resultado *= x
    return resultado

import math

def potencia(x, n):
    if n == 0:
        return 1
    if n == 1:
        return x
    if n < 0:
        return 1 / potencia(x, -n)

    resultado = potencia(x, n // 2)
    if n % 2 == 0:
        return resultado * resultado
    else:
        return x * resultado * resultado

print(potencia(2, 3))
print(potencia(2, -3))
print(potencia(0, 3))
print(potencia(1, 3))

def potencia(x, n):
    if n == 0:
        return 1
    elif n % 2 == 0:
        return potencia(x * x, n // 2)
    else:
        return x * potencia(x, n - 1)


x = int(input("Ingrese un número x: "))
n = int(input("Ingrese un número n para la potencia de x: "))

print(f"La potencia de {x} elevado a {n} es: {potencia(x, n)}")


# complejidad de tiempo: O(log(n))
# complejidad de espacio: O(1)

"""##• Ejercicio 9: Conteo de Vocales
Escribe un programa que cuente y muestre Ia cantidad de vocales en una
cadena ingresada por el usuario.
"""


print("======================")
print("CONTADOR DE VOCALES")
print("======================")
def contar_vocales(cadena):
    vocales = 'aeiou'
    contador = 0

    for letra in cadena:
        if letra.lower() in vocales:
            contador += 1

    return contador

cadena = input("Ingrese una cadena: ")
print("La cantidad de vocales en la cadena es:", contar_vocales(cadena))


# complejidad de tiempo: O(n)
# complejidad de espacio: O(1)

"""##Ejercicio 10: Impresión de Patrón
Escribe un programa que muestre el siguiente patrón en pantalla,
donde n es ingresado por el usuario: (*)

"""


print("======================")
print("PATRON")
print("======================")

def imprimir_patron(n):
    for i in range(n):
        print("*" * (i + 1))

n = int(input("Ingrese el número de filas del patrón: "))
imprimir_patron(n)

# complejidad de tiempo: O(n)VA
# complejidad de espacio: O(1)